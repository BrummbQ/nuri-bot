name: Products Api Tests

on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: BrummbQ/products-api

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api/products

    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: configure env
        env:
          CI_ENV: ${{secrets.CI_PRODUCTS_API_ENV}}
        shell: bash
        run: |
          echo "$CI_ENV" > .env
      - name: Run tests with pytest
        run: |
          pytest

  build-and-push-image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./api/products
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Set up Kubernetes kubeconfig
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          echo "$KUBECONFIG" > kubeconfig

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Deploy Helm Chart
        env:
          MONGODB_URI: ${{ secrets.PRODUCTS_MONGODB_URI }}
          JWT_PUBLIC: ${{ secrets.PRODUCTS_JWT_PUBLIC }}
        run: |
          helm upgrade --install products-api ./infrastructure/charts/products-api \
            --kubeconfig kubeconfig \
            --namespace nuri-prod --create-namespace \
            --set image.tag=sha-${{ github.sha }} \
            --set secrets.MONGODB_URI="${MONGODB_URI}" \
            --set secrets.JWT_PUBLIC="${JWT_PUBLIC}" \
            --wait
